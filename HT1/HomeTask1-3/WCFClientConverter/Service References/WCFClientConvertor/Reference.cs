//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WCFClientConverter.WCFClientConvertor {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConvertedUnits", Namespace="http://schemas.datacontract.org/2004/07/ServiceConverter")]
    [System.SerializableAttribute()]
    public partial class ConvertedUnits : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double celsiusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double fohrenheitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double footField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double inchField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double yardField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double celsius {
            get {
                return this.celsiusField;
            }
            set {
                if ((this.celsiusField.Equals(value) != true)) {
                    this.celsiusField = value;
                    this.RaisePropertyChanged("celsius");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double fohrenheit {
            get {
                return this.fohrenheitField;
            }
            set {
                if ((this.fohrenheitField.Equals(value) != true)) {
                    this.fohrenheitField = value;
                    this.RaisePropertyChanged("fohrenheit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double foot {
            get {
                return this.footField;
            }
            set {
                if ((this.footField.Equals(value) != true)) {
                    this.footField = value;
                    this.RaisePropertyChanged("foot");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double inch {
            get {
                return this.inchField;
            }
            set {
                if ((this.inchField.Equals(value) != true)) {
                    this.inchField = value;
                    this.RaisePropertyChanged("inch");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double yard {
            get {
                return this.yardField;
            }
            set {
                if ((this.yardField.Equals(value) != true)) {
                    this.yardField = value;
                    this.RaisePropertyChanged("yard");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WCFClientConvertor.IConverter")]
    public interface IConverter {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConverter/LinearMeasure", ReplyAction="http://tempuri.org/IConverter/LinearMeasureResponse")]
        WCFClientConverter.WCFClientConvertor.ConvertedUnits LinearMeasure(double meters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConverter/LinearMeasure", ReplyAction="http://tempuri.org/IConverter/LinearMeasureResponse")]
        System.Threading.Tasks.Task<WCFClientConverter.WCFClientConvertor.ConvertedUnits> LinearMeasureAsync(double meters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConverter/CelsiumToFohrenheit", ReplyAction="http://tempuri.org/IConverter/CelsiumToFohrenheitResponse")]
        WCFClientConverter.WCFClientConvertor.ConvertedUnits CelsiumToFohrenheit(double c);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConverter/CelsiumToFohrenheit", ReplyAction="http://tempuri.org/IConverter/CelsiumToFohrenheitResponse")]
        System.Threading.Tasks.Task<WCFClientConverter.WCFClientConvertor.ConvertedUnits> CelsiumToFohrenheitAsync(double c);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConverter/FohrenheitToCelsium", ReplyAction="http://tempuri.org/IConverter/FohrenheitToCelsiumResponse")]
        WCFClientConverter.WCFClientConvertor.ConvertedUnits FohrenheitToCelsium(double f);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConverter/FohrenheitToCelsium", ReplyAction="http://tempuri.org/IConverter/FohrenheitToCelsiumResponse")]
        System.Threading.Tasks.Task<WCFClientConverter.WCFClientConvertor.ConvertedUnits> FohrenheitToCelsiumAsync(double f);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IConverterChannel : WCFClientConverter.WCFClientConvertor.IConverter, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ConverterClient : System.ServiceModel.ClientBase<WCFClientConverter.WCFClientConvertor.IConverter>, WCFClientConverter.WCFClientConvertor.IConverter {
        
        public ConverterClient() {
        }
        
        public ConverterClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ConverterClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ConverterClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ConverterClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public WCFClientConverter.WCFClientConvertor.ConvertedUnits LinearMeasure(double meters) {
            return base.Channel.LinearMeasure(meters);
        }
        
        public System.Threading.Tasks.Task<WCFClientConverter.WCFClientConvertor.ConvertedUnits> LinearMeasureAsync(double meters) {
            return base.Channel.LinearMeasureAsync(meters);
        }
        
        public WCFClientConverter.WCFClientConvertor.ConvertedUnits CelsiumToFohrenheit(double c) {
            return base.Channel.CelsiumToFohrenheit(c);
        }
        
        public System.Threading.Tasks.Task<WCFClientConverter.WCFClientConvertor.ConvertedUnits> CelsiumToFohrenheitAsync(double c) {
            return base.Channel.CelsiumToFohrenheitAsync(c);
        }
        
        public WCFClientConverter.WCFClientConvertor.ConvertedUnits FohrenheitToCelsium(double f) {
            return base.Channel.FohrenheitToCelsium(f);
        }
        
        public System.Threading.Tasks.Task<WCFClientConverter.WCFClientConvertor.ConvertedUnits> FohrenheitToCelsiumAsync(double f) {
            return base.Channel.FohrenheitToCelsiumAsync(f);
        }
    }
}
